// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -typed -write_package_comment=false -source=api.go -destination=api_mock.go -package log
//

package log

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any, attrs ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(msg any, args ...any) *MockLoggerDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
	return &MockLoggerDebugfCall{Call: call}
}

// MockLoggerDebugfCall wrap *gomock.Call
type MockLoggerDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugfCall) Return() *MockLoggerDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugfCall) Do(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugfCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any, attrs ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(msg any, args ...any) *MockLoggerErrorfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
	return &MockLoggerErrorfCall{Call: call}
}

// MockLoggerErrorfCall wrap *gomock.Call
type MockLoggerErrorfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorfCall) Return() *MockLoggerErrorfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorfCall) Do(f func(string, ...any)) *MockLoggerErrorfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorfCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any, attrs ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Infof mocks base method.
func (m *MockLogger) Infof(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(msg any, args ...any) *MockLoggerInfofCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
	return &MockLoggerInfofCall{Call: call}
}

// MockLoggerInfofCall wrap *gomock.Call
type MockLoggerInfofCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfofCall) Return() *MockLoggerInfofCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfofCall) Do(f func(string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfofCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, attrs ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any, attrs ...any) *MockLoggerWarnCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, attrs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
	return &MockLoggerWarnCall{Call: call}
}

// MockLoggerWarnCall wrap *gomock.Call
type MockLoggerWarnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnCall) Return() *MockLoggerWarnCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnCall) Do(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(msg any, args ...any) *MockLoggerWarnfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
	return &MockLoggerWarnfCall{Call: call}
}

// MockLoggerWarnfCall wrap *gomock.Call
type MockLoggerWarnfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarnfCall) Return() *MockLoggerWarnfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarnfCall) Do(f func(string, ...any)) *MockLoggerWarnfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarnfCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarnfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithAttrs mocks base method.
func (m *MockLogger) WithAttrs(attrs ...any) Logger {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithAttrs", varargs...)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithAttrs indicates an expected call of WithAttrs.
func (mr *MockLoggerMockRecorder) WithAttrs(attrs ...any) *MockLoggerWithAttrsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAttrs", reflect.TypeOf((*MockLogger)(nil).WithAttrs), attrs...)
	return &MockLoggerWithAttrsCall{Call: call}
}

// MockLoggerWithAttrsCall wrap *gomock.Call
type MockLoggerWithAttrsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithAttrsCall) Return(arg0 Logger) *MockLoggerWithAttrsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithAttrsCall) Do(f func(...any) Logger) *MockLoggerWithAttrsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithAttrsCall) DoAndReturn(f func(...any) Logger) *MockLoggerWithAttrsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithContext mocks base method.
func (m *MockLogger) WithContext(ctx context.Context) Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLoggerMockRecorder) WithContext(ctx any) *MockLoggerWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLogger)(nil).WithContext), ctx)
	return &MockLoggerWithContextCall{Call: call}
}

// MockLoggerWithContextCall wrap *gomock.Call
type MockLoggerWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithContextCall) Return(arg0 Logger) *MockLoggerWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithContextCall) Do(f func(context.Context) Logger) *MockLoggerWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithContextCall) DoAndReturn(f func(context.Context) Logger) *MockLoggerWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
