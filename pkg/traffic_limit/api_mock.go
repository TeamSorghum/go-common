// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -typed -write_package_comment=false -source=api.go -destination=api_mock.go -package trafficlimit
//

package trafficlimit

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
	isgomock struct{}
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// PeakShaving mocks base method.
func (m *MockProxy) PeakShaving(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeakShaving", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PeakShaving indicates an expected call of PeakShaving.
func (mr *MockProxyMockRecorder) PeakShaving(ctx any) *MockProxyPeakShavingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeakShaving", reflect.TypeOf((*MockProxy)(nil).PeakShaving), ctx)
	return &MockProxyPeakShavingCall{Call: call}
}

// MockProxyPeakShavingCall wrap *gomock.Call
type MockProxyPeakShavingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyPeakShavingCall) Return(arg0 error) *MockProxyPeakShavingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyPeakShavingCall) Do(f func(context.Context) error) *MockProxyPeakShavingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyPeakShavingCall) DoAndReturn(f func(context.Context) error) *MockProxyPeakShavingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RateLimit mocks base method.
func (m *MockProxy) RateLimit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RateLimit indicates an expected call of RateLimit.
func (mr *MockProxyMockRecorder) RateLimit(ctx any) *MockProxyRateLimitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimit", reflect.TypeOf((*MockProxy)(nil).RateLimit), ctx)
	return &MockProxyRateLimitCall{Call: call}
}

// MockProxyRateLimitCall wrap *gomock.Call
type MockProxyRateLimitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyRateLimitCall) Return(arg0 error) *MockProxyRateLimitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyRateLimitCall) Do(f func(context.Context) error) *MockProxyRateLimitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyRateLimitCall) DoAndReturn(f func(context.Context) error) *MockProxyRateLimitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPrefix mocks base method.
func (m *MockProxy) SetPrefix(prefix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrefix", prefix)
}

// SetPrefix indicates an expected call of SetPrefix.
func (mr *MockProxyMockRecorder) SetPrefix(prefix any) *MockProxySetPrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrefix", reflect.TypeOf((*MockProxy)(nil).SetPrefix), prefix)
	return &MockProxySetPrefixCall{Call: call}
}

// MockProxySetPrefixCall wrap *gomock.Call
type MockProxySetPrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxySetPrefixCall) Return() *MockProxySetPrefixCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxySetPrefixCall) Do(f func(string)) *MockProxySetPrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxySetPrefixCall) DoAndReturn(f func(string)) *MockProxySetPrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
