// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -typed -write_package_comment=false -source=api.go -destination=api_mock.go -package cache
//

package cache

import (
	context "context"
	reflect "reflect"

	valkey "github.com/valkey-io/valkey-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
	isgomock struct{}
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockProxy) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProxyMockRecorder) Delete(ctx, key any) *MockProxyDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProxy)(nil).Delete), ctx, key)
	return &MockProxyDeleteCall{Call: call}
}

// MockProxyDeleteCall wrap *gomock.Call
type MockProxyDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyDeleteCall) Return(arg0 error) *MockProxyDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyDeleteCall) Do(f func(context.Context, string) error) *MockProxyDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyDeleteCall) DoAndReturn(f func(context.Context, string) error) *MockProxyDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Expire mocks base method.
func (m *MockProxy) Expire(ctx context.Context, key string, seconds int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, seconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockProxyMockRecorder) Expire(ctx, key, seconds any) *MockProxyExpireCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockProxy)(nil).Expire), ctx, key, seconds)
	return &MockProxyExpireCall{Call: call}
}

// MockProxyExpireCall wrap *gomock.Call
type MockProxyExpireCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyExpireCall) Return(arg0 error) *MockProxyExpireCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyExpireCall) Do(f func(context.Context, string, int64) error) *MockProxyExpireCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyExpireCall) DoAndReturn(f func(context.Context, string, int64) error) *MockProxyExpireCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockProxy) Get(ctx context.Context, key string) valkey.ValkeyResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(valkey.ValkeyResult)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockProxyMockRecorder) Get(ctx, key any) *MockProxyGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProxy)(nil).Get), ctx, key)
	return &MockProxyGetCall{Call: call}
}

// MockProxyGetCall wrap *gomock.Call
type MockProxyGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyGetCall) Return(arg0 valkey.ValkeyResult) *MockProxyGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyGetCall) Do(f func(context.Context, string) valkey.ValkeyResult) *MockProxyGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyGetCall) DoAndReturn(f func(context.Context, string) valkey.ValkeyResult) *MockProxyGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Incr mocks base method.
func (m *MockProxy) Incr(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockProxyMockRecorder) Incr(ctx, key any) *MockProxyIncrCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockProxy)(nil).Incr), ctx, key)
	return &MockProxyIncrCall{Call: call}
}

// MockProxyIncrCall wrap *gomock.Call
type MockProxyIncrCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyIncrCall) Return(arg0 int64, arg1 error) *MockProxyIncrCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyIncrCall) Do(f func(context.Context, string) (int64, error)) *MockProxyIncrCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyIncrCall) DoAndReturn(f func(context.Context, string) (int64, error)) *MockProxyIncrCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IncrBy mocks base method.
func (m *MockProxy) IncrBy(ctx context.Context, key string, increment int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", ctx, key, increment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockProxyMockRecorder) IncrBy(ctx, key, increment any) *MockProxyIncrByCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockProxy)(nil).IncrBy), ctx, key, increment)
	return &MockProxyIncrByCall{Call: call}
}

// MockProxyIncrByCall wrap *gomock.Call
type MockProxyIncrByCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyIncrByCall) Return(arg0 int64, arg1 error) *MockProxyIncrByCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyIncrByCall) Do(f func(context.Context, string, int64) (int64, error)) *MockProxyIncrByCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyIncrByCall) DoAndReturn(f func(context.Context, string, int64) (int64, error)) *MockProxyIncrByCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockProxy) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockProxyMockRecorder) Set(ctx, key, value any) *MockProxySetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockProxy)(nil).Set), ctx, key, value)
	return &MockProxySetCall{Call: call}
}

// MockProxySetCall wrap *gomock.Call
type MockProxySetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxySetCall) Return(arg0 error) *MockProxySetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxySetCall) Do(f func(context.Context, string, string) error) *MockProxySetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxySetCall) DoAndReturn(f func(context.Context, string, string) error) *MockProxySetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Setex mocks base method.
func (m *MockProxy) Setex(ctx context.Context, key, value string, seconds int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setex", ctx, key, value, seconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setex indicates an expected call of Setex.
func (mr *MockProxyMockRecorder) Setex(ctx, key, value, seconds any) *MockProxySetexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setex", reflect.TypeOf((*MockProxy)(nil).Setex), ctx, key, value, seconds)
	return &MockProxySetexCall{Call: call}
}

// MockProxySetexCall wrap *gomock.Call
type MockProxySetexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxySetexCall) Return(arg0 error) *MockProxySetexCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxySetexCall) Do(f func(context.Context, string, string, int64) error) *MockProxySetexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxySetexCall) DoAndReturn(f func(context.Context, string, string, int64) error) *MockProxySetexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
