// Code generated by MockGen. DO NOT EDIT.
// Source: limiter.go
//
// Generated by this command:
//
//	mockgen -write_package_comment=false -source=limiter.go -destination=limiter_mock.go -package limiter
//

package limiter

import (
	context "context"
	reflect "reflect"

	rueidislimiter "github.com/redis/rueidis/rueidislimiter"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockService) Allow(ctx context.Context, identifier string, options ...rueidislimiter.RateLimitOption) (rueidislimiter.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identifier}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Allow", varargs...)
	ret0, _ := ret[0].(rueidislimiter.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockServiceMockRecorder) Allow(ctx, identifier any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identifier}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockService)(nil).Allow), varargs...)
}

// AllowN mocks base method.
func (m *MockService) AllowN(ctx context.Context, identifier string, n int64, options ...rueidislimiter.RateLimitOption) (rueidislimiter.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identifier, n}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllowN", varargs...)
	ret0, _ := ret[0].(rueidislimiter.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowN indicates an expected call of AllowN.
func (mr *MockServiceMockRecorder) AllowN(ctx, identifier, n any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identifier, n}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowN", reflect.TypeOf((*MockService)(nil).AllowN), varargs...)
}

// Check mocks base method.
func (m *MockService) Check(ctx context.Context, identifier string, options ...rueidislimiter.RateLimitOption) (rueidislimiter.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, identifier}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(rueidislimiter.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockServiceMockRecorder) Check(ctx, identifier any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, identifier}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockService)(nil).Check), varargs...)
}
