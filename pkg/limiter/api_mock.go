// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -typed -write_package_comment=false -source=api.go -destination=api_mock.go -package limiter
//

package limiter

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxy is a mock of Proxy interface.
type MockProxy struct {
	ctrl     *gomock.Controller
	recorder *MockProxyMockRecorder
	isgomock struct{}
}

// MockProxyMockRecorder is the mock recorder for MockProxy.
type MockProxyMockRecorder struct {
	mock *MockProxy
}

// NewMockProxy creates a new mock instance.
func NewMockProxy(ctrl *gomock.Controller) *MockProxy {
	mock := &MockProxy{ctrl: ctrl}
	mock.recorder = &MockProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxy) EXPECT() *MockProxyMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockProxy) Allow(ctx context.Context, identifier string) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx, identifier)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow.
func (mr *MockProxyMockRecorder) Allow(ctx, identifier any) *MockProxyAllowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockProxy)(nil).Allow), ctx, identifier)
	return &MockProxyAllowCall{Call: call}
}

// MockProxyAllowCall wrap *gomock.Call
type MockProxyAllowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyAllowCall) Return(arg0 *Result, arg1 error) *MockProxyAllowCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyAllowCall) Do(f func(context.Context, string) (*Result, error)) *MockProxyAllowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyAllowCall) DoAndReturn(f func(context.Context, string) (*Result, error)) *MockProxyAllowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllowN mocks base method.
func (m *MockProxy) AllowN(ctx context.Context, identifier string, n int64) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowN", ctx, identifier, n)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowN indicates an expected call of AllowN.
func (mr *MockProxyMockRecorder) AllowN(ctx, identifier, n any) *MockProxyAllowNCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowN", reflect.TypeOf((*MockProxy)(nil).AllowN), ctx, identifier, n)
	return &MockProxyAllowNCall{Call: call}
}

// MockProxyAllowNCall wrap *gomock.Call
type MockProxyAllowNCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyAllowNCall) Return(arg0 *Result, arg1 error) *MockProxyAllowNCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyAllowNCall) Do(f func(context.Context, string, int64) (*Result, error)) *MockProxyAllowNCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyAllowNCall) DoAndReturn(f func(context.Context, string, int64) (*Result, error)) *MockProxyAllowNCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Check mocks base method.
func (m *MockProxy) Check(ctx context.Context, identifier string) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, identifier)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockProxyMockRecorder) Check(ctx, identifier any) *MockProxyCheckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockProxy)(nil).Check), ctx, identifier)
	return &MockProxyCheckCall{Call: call}
}

// MockProxyCheckCall wrap *gomock.Call
type MockProxyCheckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProxyCheckCall) Return(arg0 *Result, arg1 error) *MockProxyCheckCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProxyCheckCall) Do(f func(context.Context, string) (*Result, error)) *MockProxyCheckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProxyCheckCall) DoAndReturn(f func(context.Context, string) (*Result, error)) *MockProxyCheckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
